map "http://hl7.org/fhir/StructureMap/RefertodilaboratorioSimpleBody" = "RefertodilaboratorioSimpleBody"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Specimen" alias Specimen as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL_PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://hl7.org/fhir/StructureMap/CdaToFhirDataTypes"
imports "http://hl7.org/fhir/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1), request.url = append('Composition/', uuid1),  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('urn:uuid:', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('urn:uuid:', uuid3),request.url = append('Encounter/', uuid3),
  bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('urn:uuid:', uuid4), request.url = append('Specimen/', uuid4)
  //bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('urn:uuid:', uuid5),request.url = append('DocumentReference/', uuid5) then {
    then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,specimen) "cdatobundle";
   cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
        recordTarget-> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle,target specimen : Specimen) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda.effectiveTime -> bundle.timestamp;
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter,specimen);       
       };
      };
    } "body";
  };
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter,target specimen : Specimen) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('DiagnosticReport') as DiagnosticReport,  DiagnosticReport.id = uuid() as uuid1,  e1.fullUrl = append('urn:uuid:', uuid1), request.url = append('DiagnosticReport/', uuid1) ,tgt.entry  = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %DiagnosticReport.id) then {
    entry1.act as act1 then Act(act1, patient, DiagnosticReport ,enc , bundle,specimen) "act";
  }"entry";
  src.component as component then {
    component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc,specimen);
  }"component";
}


group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle,target specimen : Specimen) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";

  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

    obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
    obs->ob.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.specimen as spcm -> ob.specimen = create('Reference') as reference, reference.reference = ('urn:uuid:' + %specimen.id) then Specimen(spcm,patient,specimen)"specimen";
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('Quantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue"; 
             v->ref.high = create('Quantity') as high  then {
            v.high as h1 then {
              h1.value as decValue1-> high.value = decValue1;
              h1.unit as Unit1-> high.unit = Unit1;
            }"decValue";
          }"high";           
          }"IVL_PQ";
        obsRange.interpretationCode->ref.type;
        //obsRange.lab:precondition as precondition then {
          //precondition.lab:criterion as criterion then{
           //criterion.lab:code -> ref.appliesTo "appliesTo";
           //criterion.lab:value: IVL_PQ as v then {
            //v.low as l1 then {
             // l1.value as decValue-> ref.age as age, age.low = 23;
            //}"low";
         // }"v";
          //}"criterion";
        //}"precondition";
      }"obsRange";              
    }"refRange";  
}
    
group Specimen(source src : Specimen, target patient : Patient,target spe : Specimen) {
  src.specimenRole as specimenRole then{
    specimenRole.id ->spe.identifier;
    specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
      specimenPlayingEntity.code -> spe.type;
 }"specimenPlayingEntity";
  }"SpecimenRole";
  src->spe.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %patient.id) "reference";
}


group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle, target specimen:Specimen){
  cda.code -> ac.code;
  cda.statusCode as statusc where (code='completed') -> ac.status ='final';
  cda.statusCode as statusc where (code='active') -> ac.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ac.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ac.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value3";
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %enc.id) "reference";
  cda.specimen->ac.specimen=create('Reference') as reference,  reference.reference = ('urn:uuid:' + %specimen.id) "reference";
  cda.participant  as part->  enc.participant as participant then{
     part  -> participant.type as type then { 
          part -> type.coding as coding then{
            part-> coding.code = (part.typeCode) "codice";
            part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
          } "codeType"; 
        }"type";
    part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
      participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e.fullUrl = append('urn:uuid:', uuid1),  reference.reference = ('urn:uuid:' + %practitioner.id) then { 
        participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
         }"participanRoleBund";  
    }"participantRole";
  }"participant";
  cda.entryRelationship as entryRelationship then {
    entryRelationship.observation as observation ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as obs,  obs.id = uuid() as uuid2,  e.fullUrl = append('urn:uuid:', uuid2), request.url = append('Observation/', uuid2), ac.result = create('Reference') as reference,  reference.reference = ('urn:uuid:' + %obs.id) then Observation(observation,pat,enc,obs,bundle,specimen) "OBS";
  }"entryRelationship";
}

